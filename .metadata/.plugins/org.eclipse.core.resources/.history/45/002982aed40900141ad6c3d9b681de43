#include <GL/glut.h>
#include <math.h>

double cameraAngle = 0;
double cameraAngleDelta = 0.012;

double cameraHeight = 100;
double cameraRadius = 150;

double rectAngle;	//in degree

void draw(){

	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	glClearColor(1, 1, 1, 0);	//color black
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

	//load the correct matrix -- MODEL-VIEW matrix
	glMatrixMode(GL_MODELVIEW);
	//initialize the matrix
	glLoadIdentity();

	gluLookAt(cameraRadius*cos(cameraAngle), cameraRadius*sin(cameraAngle), cameraHeight,		0,0,0,		0,0,1);
	//NOTE: the camera still CONSTANTLY looks at the center
	//cameraAngle is in RADIAN, since you are using inside COS and SIN
	//again select MODEL-VIEW
	glMatrixMode(GL_MODELVIEW);

	GLfloat cyan[] = {0.9f, .6f, .2f, 1.f};
	glMaterialfv(GL_FRONT, GL_DIFFUSE, cyan);
	glPushMatrix();{
		glNormal3d(0, 1, 0);
		glTranslatef(0,0,0);
		glScalef(1.5, 1.5, 1.5);
		glutSolidSphere(25, 20, 20);
	}glPopMatrix();

	glutSwapBuffers();
}

void setCamera(){
	glClearColor(0, 0, 0, 0);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluPerspective(70, 1, 0.1, 10000.0);
}

void setLighting(){
	glEnable(GL_LIGHTING);
	glEnable(GL_LIGHT0);
	GLfloat lightpos[] = {.75, 0.05, 0.05, 0.};
	glLightfv(GL_LIGHT0, GL_POSITION, lightpos);
}

void rotate(){
	cameraAngle += cameraAngleDelta;
	rectAngle -= 1;
	glutPostRedisplay();
}

int main(int argc, char** argv){
	glutInit(&argc, argv);
	glutInitWindowSize(500, 500);
	glutInitWindowPosition(0, 0);
	glutInitDisplayMode(GLUT_DEPTH | GLUT_DOUBLE | GLUT_RGB);	//Depth, Double buffer, RGB color
	glutCreateWindow("sphere");
	setCamera();
	setLighting();
	glutDisplayFunc(draw);
	glutMainLoop();
}
