#include <GL/glut.h>
#include <math.h>
#define PI 3.14159

const float RAD = PI/180;

void drawAnyCircle(float radius, int angleStart, int angleEnd, float x){
	glColor3f(1.0f, 0.0f, 0.0f);
	glBegin(GL_TRIANGLE_FAN);
	for (int i=angleStart; i < angleEnd; i++){
		float degInRad = i*RAD;
		glVertex2f(cos(degInRad)*radius + x,sin(degInRad)*radius);
	}

	glEnd();
	glFlush();
}

void drawRectangle (float x1, float x2, float y1, float y2){
	glColor3f(0.15f, 0.5f, 0.15f);
	glBegin(GL_QUADS);
	glVertex2f(x1, y1);
	glVertex2f(x2, y1);
	glVertex2f(x2, y2);
	glVertex2f(x1, y2);
	glEnd();
}

void drawHorizontalTopSemiCircle(float radius, float x){
	drawAnyCircle(radius, 0, 180, x);
}

void drawHorizontalBottomSemiCircle(float radius, float x){
	drawAnyCircle(radius, 180, 360, x);
}

void drawVerticalRightSemiCircle(float radius, float x){
	drawAnyCircle(radius, -90, 90, x);
}

void drawVerticalLeftSemiCircle(float radius, float x){
	drawAnyCircle(radius, 90, 270, x);
}

void drawCircle(float radius, float x){
	drawAnyCircle(radius, 0, 360, x);
}

void drawLeftWing(float x1, float y1, float x2, float y2, float radius){
	drawRectangle(x1, x2, y1, y2);
	drawVerticalLeftSemiCircle(radius, x2);
}

void drawRightWing(float x1, float y1, float x2, float y2, float radius){
	drawRectangle(x1, x2, y1, y2);
	drawVerticalRightSemiCircle(radius, x2);
}

void drawWings(){

}

void drawFan(){
	drawCircle(0.5, 0);
	drawWings();
}

void drawFanEfficiently(){

}

void display(){
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	drawCircle(0.05, 0);
	drawLeftWing(0, -0.05, -0.5, 0.05, 0.05);
	drawRightWing(0, -0.05, 0.5, 0.05, 0.05);
	glutSwapBuffers();
}

int main (int argc, char *argv[]){
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_RGB | GLUT_DEPTH | GLUT_DOUBLE);
	glutInitWindowSize(800, 600);
	glutCreateWindow("Fan");
	glutDisplayFunc(display);
	glutMainLoop();
}
